services:

  product-service:
    image: product-service:latest
    build: ../product-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      broker:
        condition: service_started


  recommendation-service:
    image: recommendation-service:latest
    build: ../recommendation-servise
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      broker:
        condition: service_started

  review-service:
    image: review-service:latest
    build: ../review-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    depends_on:
      mysql:
        condition: service_healthy
      broker:
        condition: service_started
      config-server:
        condition: service_healthy

  product-composite:
    image: product-composite-service:latest
    build: ../product-composite-service
    mem_limit: 512m
    # ports:
    #   - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    depends_on:
      config-server:
        condition: service_healthy
      broker:
        condition: service_started

  mongodb:
    image: mongodb/mongodb-community-server:7.0-ubuntu2204
    mem_limit: 512m
    ports:
      - "27017:27017"
    command: mongod
    healthcheck:
      test: ["CMD", "mongotop", "-n", "1"]
      interval: 10s
      timeout: 5s
      retries: 6
      start_period: 30s # Optional: Initial grace period before health checks begin

  mysql:
    image: mysql:8.4.6
    mem_limit: 512m
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user", "--password=pwd"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 120s 



  broker:
    image: apache/kafka:latest
    hostname: broker
    container_name: broker
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://broker:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

  eureka:
    environment:
    - SPRING_PROFILES_ACTIVE=docker
    - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
    - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    build: ../product-eureka-server
    mem_limit: 512m
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy   
      

  gateway:
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    build: ../gateway
    mem_limit: 512m
    ports:
      - "8443:8443"
    depends_on:
      config-server:
        condition: service_healthy

  auth-server:
    # env_file: ./my_env.env
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    build: ../auth-server
    mem_limit: 512m
    # ports:
    #   - "9999:9999"
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://localhost:9999/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 60
    depends_on:
      config-server:
        condition: service_healthy

  config-server:
    build: ../config-server
    mem_limit: 512m
    # env_file: ./my_env.env
    ports:
      - "8888:8888"
    environment:
    - SPRING_PROFILES_ACTIVE=docker
    - CONFIG_SERVER_USR=${ENV_CONFIG_SERVER_USR}
    - CONFIG_SERVER_PWD=${ENV_CONFIG_SERVER_PWD}
    - CONFIG_SERVER_ENCRYPT_KEY=${ENV_CONFIG_SERVER_ENCRYPT_KEY}
    # - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
    # - SPRING_SECURITY_USER_NAME=${ENV_CONFIG_SERVER_USR}
    # - SPRING_SECURITY_USER_PASSWORD=${ENV_CONFIG_SERVER_PWD}
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://${ENV_CONFIG_SERVER_USR}:${ENV_CONFIG_SERVER_PWD}@localhost:8888/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 60   
    # environment:
    #   - SPRING_PROFILES_ACTIVE=docker,native
    #   - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
    #   - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
    #   - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    # volumes:
    #   - $PWD/config-repo:/config-repo